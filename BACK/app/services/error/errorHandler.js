import logger from './logger.js';
import APIError from './APIError.js';

/**
 * Sends an error response to the client.
 * @function sendErrorResponse
 * @param {*} res - The response object.
 * @param {number} status - The HTTP status code of the error response.
 * @param {string} message - The error message.
 * @param {string} [stack] - The error stack trace (only included in development environment).
 * @returns {*} The response sent to the client.
 */
const sendErrorResponse = (res, status, message, stack) => {
  const responseData = {
    status: 'error',
    message,
  };
  // Checking environment to apply detailed log
  if (process.env.NODE_ENV === 'development') {
    responseData.stack = stack;
  }
  return res.status(status).json(responseData);
};

/**
 * Handles errors in the application.
 * @param {Error} error - The error object.
 * @param {Object} _ - The request object (not used).
 * @param {Object} res - The response object.
 * @param {Function} next - The next middleware function.
 * @returns {Promise} - A promise that resolves to the response object.
*/
// eslint-disable-next-line no-unused-vars
const errorHandler = async (error, _, res, next) => {
  try {
    // Handle APIError first
    if (error instanceof APIError) {
      if (!Number.isInteger(error.status) || error.status < 100 || error.status >= 600) {
        // Log error status
        await logger.error(`Invalid HTTP status code in APIError: ${error.status}`);
        // Use default status code for invalid status
        return sendErrorResponse(res, 500, 'Internal server error');
      }

      // Log API error
      await logger.error(`${error.message}\n${error.stack}`);
      // Return the response generated by sendErrorResponse directly
      return sendErrorResponse(res, error.status, error.message);
    }

    // Handle Joi validation error
    if (error.name === 'ValidationError') {
      await logger.error(`Joi validation error: ${error.message}`);
      return sendErrorResponse(res, 422, error.message);
    }

    // Log detailed error information for other types of errors
    await logger.error(`Unexpected error : ${error.stack}`);
    return sendErrorResponse(res, 500, 'Internal server error');
  } catch (loggingError) {
    // If an error occurs during logging, log it to the console
    console.error('Error while logging:', loggingError);
    await logger.error('Error while logging:', loggingError);
    // Return a generic internal server error response
    return sendErrorResponse(res, 500, 'Internal server error');
  }
};

export default errorHandler;
